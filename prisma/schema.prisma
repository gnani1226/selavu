datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organisation {
  orgId           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  dateformat      String       @db.VarChar(255) @default("DD-MM-YYYY")
  timeformat      String       @db.VarChar(255) @default("HH:MM")
  location        String?      @db.VarChar(255)
  teams           Team[]
  leaveTypes      LeaveType[]
  leavePolicies   LeavePolicy[]
  holidays        Holiday[]
  visibiity       Visibility   @default(SELF)
  startOfWorkWeek DaysOfWeek   @default(MONDAY)
  workweek        DaysOfWeek[] @default([MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY])
  timeZone        String       @db.VarChar(255)
  ownerId         String?      @db.Uuid
  createdOn       DateTime?    @default(now()) @db.Timestamp
  createdBy       String?      @db.VarChar(255)
  updatedBy       String?      @db.VarChar(255)
  updatedOn       DateTime?    @updatedAt @db.Timestamp
}

model Team {
  teamId     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar(255)
  orgId      String       @db.Uuid
  org        Organisation @relation(fields: [orgId], references: [orgId])
  users      User[]
  isActive   Boolean      @default(true)
  manager    String?      @db.Uuid
  createdOn  DateTime?    @default(now()) @db.Timestamp
  createdBy  String?      @db.VarChar(255)
  updatedBy  String?      @db.VarChar(255)
  updatedOn  DateTime?    @updatedAt @db.Timestamp
}

model User {
  userId    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  teamId    String    @db.Uuid
  team      Team      @relation(fields: [teamId], references: [teamId])
  isManager Boolean   @default(false)
  leaves    Leave[]
  createdOn DateTime? @default(now()) @db.Timestamp
  createdBy String?   @db.VarChar(255)
  updatedBy String?   @db.VarChar(255)
  updatedOn DateTime? @updatedAt @db.Timestamp
  accruedLeave Int
  usedLeave Int
}

model Leave {
  leaveId    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leaveType  String        @db.VarChar(255)
  from       DateTime      @db.Timestamp
  to         DateTime      @db.Timestamp
  duration   LeaveDuration
  shift      Shift
  isApproved LeaveStatus @default(PENDING)
  userId     String        @db.Uuid
  teamId     String        @db.Uuid
  user       User          @relation(fields: [userId], references: [userId])
  reason     String        @db.VarChar(255)
  createdOn  DateTime?     @default(now()) @db.Timestamp
  createdBy  String?       @db.VarChar(255)
  updatedBy  String?       @db.VarChar(255)
  updatedOn  DateTime?     @updatedAt @db.Timestamp
}

model LeavePolicy {
  leavePolicyId    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leaveTypeId      String                  @db.Uuid
  unlimited        Boolean                 @default(false)
  maxLeaves        Int
  accurals         Boolean                 @default(false)
  accuralFrequency AccuralFrequencyOptions?
  accrueOn         AccrueOnOptions?
  rollOver         Boolean                 @default(false)
  rollOverLimit    Int?
  orgId            String       @db.Uuid
  org              Organisation @relation(fields: [orgId], references: [orgId])
  rollOverExpiry   DateTime?                @db.Timestamp
  autoApprove      Boolean                 @default(false)
  isActive         Boolean                 @default(true)
  createdOn        DateTime?               @default(now()) @db.Timestamp
  createdBy        String?                 @db.VarChar(255)
  updatedBy        String?                 @db.VarChar(255)
  updatedOn        DateTime?               @updatedAt @db.Timestamp
}

model LeaveType {
  leaveTypeId    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @db.VarChar(255)
  color          String       @db.VarChar(6)
  isActive       Boolean      @default(true)
  orgId          String       @db.Uuid
  org            Organisation @relation(fields: [orgId], references: [orgId])
  setSlackStatus Boolean      @default(true)
  emoji          String       @db.Text
  statusMsg      String       @db.VarChar(255)
  createdOn      DateTime?    @default(now()) @db.Timestamp
  createdBy      String?      @db.VarChar(255)
  updatedBy      String?      @db.VarChar(255)
  updatedOn      DateTime?    @updatedAt @db.Timestamp
}

model Holiday {
  holidayId   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @db.VarChar(255)
  date        DateTime     @db.Timestamp
  isRecurring Boolean      @default(true)
  isCustom    Boolean      @default(true)
  orgId       String       @db.Uuid
  org         Organisation @relation(fields: [orgId], references: [orgId])
  createdOn   DateTime?    @default(now()) @db.Timestamp
  createdBy   String?      @db.VarChar(255)
  updatedBy   String?      @db.VarChar(255)
  updatedOn   DateTime?    @updatedAt @db.Timestamp
}

enum LeaveDuration {
  FULL_DAY
  HALF_DAY
}

enum Shift {
  MORNING
  AFTERNOON
  NONE
}

enum Visibility {
  ORG
  TEAM
  SELF
}

enum DaysOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AccuralFrequencyOptions {
  BIWEEKLY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
}

enum AccrueOnOptions {
  BEGINNING
  END
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}